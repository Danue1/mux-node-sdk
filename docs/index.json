[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/data/data.js",
    "content": "/*!\n * Mux Data\n * Copyright(c) 2018 Mux Inc.\n */\n\nconst Base = require('../base');\nconst Metrics = require('../../src/data/resources/metrics');\nconst Errors = require('../../src/data/resources/errors');\nconst Filters = require('../../src/data/resources/filters');\nconst Exports = require('../../src/data/resources/exports');\nconst VideoViews = require('../../src/data/resources/video_views');\n\n/**\n * @ignore\n * @extends Base\n * Data Class - Provides access to the Mux Data API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n */\nclass Data extends Base {\n  /**\n   * Data Constructor\n   *\n   * @param {string} accessToken - Mux API Access Token\n   * @param {string} secret - Mux API secret\n   * @constructor\n   */\n  constructor(...params) {\n    super(...params);\n\n    /** @type {Metrics} */\n    this.Metrics = new Metrics(this);\n\n    /** @type {Errors} */\n    this.Errors = new Errors(this);\n\n    /** @type {Filters} */\n    this.Filters = new Filters(this);\n\n    /** @type {Exports} */\n    this.Exports = new Exports(this);\n\n    /** @type {VideoViews} */\n    this.VideoViews = new VideoViews(this);\n  }\n}\n\nmodule.exports = Data;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/data/data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Data",
    "memberof": "src/data/data.js",
    "static": true,
    "longname": "src/data/data.js~Data",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/data.js",
    "importStyle": "Data",
    "description": "",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;"
    ],
    "lineNumber": 23,
    "ignore": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/data.js~Data",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/data.js~Data#constructor",
    "access": "public",
    "description": "Data Constructor",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accessToken",
        "description": "Mux API Access Token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secret",
        "description": "Mux API secret"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "Metrics",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#Metrics",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Metrics"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "Errors",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#Errors",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Errors"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "Filters",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#Filters",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Filters"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "Exports",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#Exports",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Exports"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "VideoViews",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#VideoViews",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "VideoViews"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/data/resources/errors.js",
    "content": "/*!\n * Mux Errors\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base errors path for the Mux API\n * */\nconst PATH = '/data/v1/errors';\n\n/**\n * Errors Class - Provides access to the Mux Data Errors API\n * @extends Base\n * @example\n * const { Data } = new Mux(accessToken, secret);\n *\n * // Returns a list of playback errors filtered by the windows operating system\n * Data.Errors.list({ filters: ['operating_system:windows'] });\n */\nclass Errors extends Base {\n  /**\n   * Returns a list of playback errors\n   *\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Data } = new Mux(accessToken, secret);\n   *\n   * // Returns a list of playback errors filtered by the windows operating system\n   * Data.Errors.list({ filters: ['operating_system:windows'] });\n   *\n   * @see https://api-docs.mux.com/#view-error-get\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n}\n\nmodule.exports = Errors;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/data/resources/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/errors.js",
    "static": true,
    "longname": "src/data/resources/errors.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/errors.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "Errors",
    "memberof": "src/data/resources/errors.js",
    "static": true,
    "longname": "src/data/resources/errors.js~Errors",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/errors.js",
    "importStyle": "Errors",
    "description": "Errors Class - Provides access to the Mux Data Errors API",
    "examples": [
      "const { Data } = new Mux(accessToken, secret);\n\n// Returns a list of playback errors filtered by the windows operating system\nData.Errors.list({ filters: ['operating_system:windows'] });"
    ],
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "list",
    "memberof": "src/data/resources/errors.js~Errors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/errors.js~Errors#list",
    "access": "public",
    "description": "Returns a list of playback errors",
    "examples": [
      "const { Data } = new Mux(accessToken, secret);\n\n// Returns a list of playback errors filtered by the windows operating system\nData.Errors.list({ filters: ['operating_system:windows'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#view-error-get"
    ],
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "example { timeframe: ['7:days'], filters: ['operating_system:windows'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/data/resources/exports.js",
    "content": "/*!\n * Mux Exports\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base exports path for the Mux API\n * */\nconst PATH = '/data/v1/exports';\n\n/**\n * Exports Class - Provides access to the Mux Data Exports API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists the available video view exports along with URLs to retrieve them\n * Data.Exports.list();\n */\nclass Exports extends Base {\n  /**\n   * Lists the available video view exports along with URLs to retrieve them\n   * @extends Base\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the available video view exports along with URLs to retrieve them\n   * Data.Exports.list();\n   *\n   * @see https://api-docs.mux.com/#export-get\n   */\n  list() {\n    return this.http.get(PATH);\n  }\n}\n\nmodule.exports = Exports;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/data/resources/exports.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/exports.js",
    "static": true,
    "longname": "src/data/resources/exports.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/exports.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "class",
    "name": "Exports",
    "memberof": "src/data/resources/exports.js",
    "static": true,
    "longname": "src/data/resources/exports.js~Exports",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/exports.js",
    "importStyle": "Exports",
    "description": "Exports Class - Provides access to the Mux Data Exports API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists the available video view exports along with URLs to retrieve them\nData.Exports.list();"
    ],
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "list",
    "memberof": "src/data/resources/exports.js~Exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/exports.js~Exports#list",
    "access": "public",
    "description": "Lists the available video view exports along with URLs to retrieve them",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists the available video view exports along with URLs to retrieve them\nData.Exports.list();"
    ],
    "see": [
      "https://api-docs.mux.com/#export-get"
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "Base"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": []
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/data/resources/filters.js",
    "content": "/*!\n * Mux Filters\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base filters path for the Mux API\n * */\nconst PATH = '/data/v1/filters';\n\n/**\n * Filters Class - Provides access to the Mux Data Filters API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists all the filters broken out into basic and advanced\n * Data.Filters.list();\n */\nclass Filters extends Base {\n  /**\n   * Lists the values for a filter along with a total count of related views\n   *\n   * @param {string} filterId - The filter name/id for see https://api-docs.mux.com/#filter-get-1 for a list of all filter ids\n   * @param {Object} [queryParams] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the values for a filter along with a total count of related views\n   * Data.Filters.get('browser', { timeframe: ['7:days'] });\n   *\n   * @see https://api-docs.mux.com/#filter-get-1\n   */\n  get(filterId, params) {\n    if (!filterId) {\n      throw new Error('Filter Id is required to get filter information.');\n    }\n    return this.http.get(`${PATH}/${filterId}`, { params });\n  }\n\n  /**\n   * Lists all the filters broken out into basic and advanced\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the available video view exports along with URLs to retrieve them\n   * Data.Filters.list();\n   *\n   * @see https://api-docs.mux.com/#filter-get\n   */\n  list() {\n    return this.http.get(PATH);\n  }\n}\n\nmodule.exports = Filters;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/data/resources/filters.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/filters.js",
    "static": true,
    "longname": "src/data/resources/filters.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/filters.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "Filters",
    "memberof": "src/data/resources/filters.js",
    "static": true,
    "longname": "src/data/resources/filters.js~Filters",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/filters.js",
    "importStyle": "Filters",
    "description": "Filters Class - Provides access to the Mux Data Filters API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists all the filters broken out into basic and advanced\nData.Filters.list();"
    ],
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "get",
    "memberof": "src/data/resources/filters.js~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/filters.js~Filters#get",
    "access": "public",
    "description": "Lists the values for a filter along with a total count of related views",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists the values for a filter along with a total count of related views\nData.Filters.get('browser', { timeframe: ['7:days'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#filter-get-1"
    ],
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filterId",
        "description": "The filter name/id for see https://api-docs.mux.com/#filter-get-1 for a list of all filter ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "queryParams",
        "description": "example { timeframe: ['7:days'], filters: ['operating_system:windows'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "list",
    "memberof": "src/data/resources/filters.js~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/filters.js~Filters#list",
    "access": "public",
    "description": "Lists all the filters broken out into basic and advanced",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists the available video view exports along with URLs to retrieve them\nData.Filters.list();"
    ],
    "see": [
      "https://api-docs.mux.com/#filter-get"
    ],
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": []
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/data/resources/metrics.js",
    "content": "/*!\n * Mux Metrics\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base metrics path for the Mux API\n * */\nconst PATH = '/data/v1/metrics';\n\n/**\n * Metrics Class - Provides access to the Mux Data Metrics API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // List all of the values across every breakdown for a specific metric grouped by operating system\n * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'operating_system' });\n */\nclass Metrics extends Base {\n  /**\n   * List the breakdown values for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} queryParams - example: {group_by: 'browser'}\n   * NOTE: the group_by query parameter is required\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List all of the values across every breakdown for a specific metric grouped by browser\n   * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n   *\n   * @see https://api-docs.mux.com/#breakdown-get\n   */\n  breakdown(metricId, params) {\n    return this.http.get(`${PATH}/${metricId}/breakdown`, { params });\n  }\n\n  /**\n   * List all of the values across every breakdown for a specific metric\n   *\n   * @param {Object} queryParams - example { value: 'safari', timeframe: '24:hours', dimension: 'cdn' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown values for a specific metric within the last 24 hours\n   * Data.Metrics.comparison({ value: 'safari', timeframe: '24:hours', dimension: 'cdn' });\n   * Note: the value query parameter is required\n   *\n   * @see https://api-docs.mux.com/#comparison-get\n   */\n  comparison(params) {\n    if (!params || (params && !params.value)) {\n      throw new Error('The value query parameter is required for comparing metrics');\n    }\n    return this.http.get(`${PATH}/comparison`, { params });\n  }\n\n  /**\n   * Returns a list of insights for a metric. These are the worst performing values across all\n   * breakdowns sorted by how much they negatively impact a specific metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} [queryParams] - example { measurement: 'median', order_direction: 'desc' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get a list of insights for a metric measured by median and ordered descending\n   * Data.Metrics.insights('aggregate_startup_time', { measurement: 'median', order_direction: 'desc' });\n   *\n   * @see https://api-docs.mux.com/#insight-get\n   */\n  insights(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for insight metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/insights`, { params });\n  }\n\n  /**\n   * Returns the overall value for a specific metric, as well as the total view count,\n   * watch time, and the Mux Global metric value for the metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#overall-get for a list of all metric ids\n   * @param {Object} [queryParams] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get the overall value for a specific metric within the past 7 days\n   * Data.Metrics.overall('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://api-docs.mux.com/#overall-get\n   */\n  overall(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for overall metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/overall`, { params });\n  }\n\n  /**\n   * Returns timeseries data for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#timeseries for a list of all metric ids\n   * @param {Object} [queryParams] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get timeseries data for a specific metric within the past 7 days\n   * Data.Metrics.timeseries('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://api-docs.mux.com/#timeseries\n   */\n  timeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for timeseries metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/timeseries`, { params });\n  }\n}\n\nmodule.exports = Metrics;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/data/resources/metrics.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/metrics.js",
    "static": true,
    "longname": "src/data/resources/metrics.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/metrics.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "Metrics",
    "memberof": "src/data/resources/metrics.js",
    "static": true,
    "longname": "src/data/resources/metrics.js~Metrics",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/metrics.js",
    "importStyle": "Metrics",
    "description": "Metrics Class - Provides access to the Mux Data Metrics API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// List all of the values across every breakdown for a specific metric grouped by operating system\nData.Metrics.breakdown('aggregate_startup_time', { group_by: 'operating_system' });"
    ],
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "breakdown",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#breakdown",
    "access": "public",
    "description": "List the breakdown values for a specific metric",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// List all of the values across every breakdown for a specific metric grouped by browser\nData.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });"
    ],
    "see": [
      "https://api-docs.mux.com/#breakdown-get"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "queryParams",
        "description": "example: {group_by: 'browser'}\nNOTE: the group_by query parameter is required"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "comparison",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#comparison",
    "access": "public",
    "description": "List all of the values across every breakdown for a specific metric",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// List the breakdown values for a specific metric within the last 24 hours\nData.Metrics.comparison({ value: 'safari', timeframe: '24:hours', dimension: 'cdn' });\nNote: the value query parameter is required"
    ],
    "see": [
      "https://api-docs.mux.com/#comparison-get"
    ],
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "queryParams",
        "description": "example { value: 'safari', timeframe: '24:hours', dimension: 'cdn' }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "insights",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#insights",
    "access": "public",
    "description": "Returns a list of insights for a metric. These are the worst performing values across all\nbreakdowns sorted by how much they negatively impact a specific metric.",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Get a list of insights for a metric measured by median and ordered descending\nData.Metrics.insights('aggregate_startup_time', { measurement: 'median', order_direction: 'desc' });"
    ],
    "see": [
      "https://api-docs.mux.com/#insight-get"
    ],
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "queryParams",
        "description": "example { measurement: 'median', order_direction: 'desc' }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "overall",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#overall",
    "access": "public",
    "description": "Returns the overall value for a specific metric, as well as the total view count,\nwatch time, and the Mux Global metric value for the metric.",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Get the overall value for a specific metric within the past 7 days\nData.Metrics.overall('aggregate_startup_time', { timeframe: ['7:days'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#overall-get"
    ],
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#overall-get for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "queryParams",
        "description": "example { timeframe: ['7:days'], filters: ['operating_system:windows'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "timeseries",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#timeseries",
    "access": "public",
    "description": "Returns timeseries data for a specific metric",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Get timeseries data for a specific metric within the past 7 days\nData.Metrics.timeseries('aggregate_startup_time', { timeframe: ['7:days'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#timeseries"
    ],
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#timeseries for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "queryParams",
        "description": "example { timeframe: ['7:days'], filters: ['operating_system:windows'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/data/resources/video_views.js",
    "content": "/*!\n * Mux Video Views\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base exports path for the Mux API\n * */\nconst PATH = '/data/v1/video-views';\n\n/**\n * VideoViews Class - Provides access to the Mux Data Video Views API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of video views for a property that occurred within the specified timeframe.\n * // Results are ordered by view_end, according to what you provide for order_direction.\n * Data.VideoViews.list({order_direction: 'asc'});\n */\nclass VideoViews extends Base {\n  /**\n   * Returns a list of video views for a property that occurred within the specified timeframe.\n   * Results are ordered by view_end, according to what you provide for order_direction.\n   *\n   * @extends Base\n   * @param {Object} queryParams - example { viewer_id: 'ABCD1234', timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * NOTE: the viewer_id query parameter is required\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of video views for a property that occurred within the specified timeframe.\n   * Data.VideoViews.list({ viewer_id: 'ABCD1234', timeframe: ['7:days'], order_direction: 'asc' });\n   * Note: the viewer_id query parameter is required\n   *\n   * @see https://api-docs.mux.com/#video-view-get-1\n   */\n  list(params) {\n    if (!params || (params && !params.viewer_id)) {\n      throw new Error('The viewer_id query parameter is required for listing video views.');\n    }\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Returns the details for a single video view\n   *\n   * @param {string} videoViewId - The ID for the video view\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns the details for a single video view\n   * Data.VideoViews.get('ABCD1234');\n   *\n   * @see https://api-docs.mux.com/#video-view-get-1\n   */\n  get(videoViewId) {\n    if (!videoViewId) {\n      throw new Error('A video view Id is required for video view details.');\n    }\n    return this.http.get(`${PATH}/${videoViewId}`);\n  }\n}\n\nmodule.exports = VideoViews;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/data/resources/video_views.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/video_views.js",
    "static": true,
    "longname": "src/data/resources/video_views.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/video_views.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "VideoViews",
    "memberof": "src/data/resources/video_views.js",
    "static": true,
    "longname": "src/data/resources/video_views.js~VideoViews",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/video_views.js",
    "importStyle": "VideoViews",
    "description": "VideoViews Class - Provides access to the Mux Data Video Views API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Returns a list of video views for a property that occurred within the specified timeframe.\n// Results are ordered by view_end, according to what you provide for order_direction.\nData.VideoViews.list({order_direction: 'asc'});"
    ],
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "list",
    "memberof": "src/data/resources/video_views.js~VideoViews",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/video_views.js~VideoViews#list",
    "access": "public",
    "description": "Returns a list of video views for a property that occurred within the specified timeframe.\nResults are ordered by view_end, according to what you provide for order_direction.",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Returns a list of video views for a property that occurred within the specified timeframe.\nData.VideoViews.list({ viewer_id: 'ABCD1234', timeframe: ['7:days'], order_direction: 'asc' });\nNote: the viewer_id query parameter is required"
    ],
    "see": [
      "https://api-docs.mux.com/#video-view-get-1"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "Base"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "queryParams",
        "description": "example { viewer_id: 'ABCD1234', timeframe: ['7:days'], filters: ['operating_system:windows'] }\nNOTE: the viewer_id query parameter is required"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "get",
    "memberof": "src/data/resources/video_views.js~VideoViews",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/video_views.js~VideoViews#get",
    "access": "public",
    "description": "Returns the details for a single video view",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n//Returns the details for a single video view\nData.VideoViews.get('ABCD1234');"
    ],
    "see": [
      "https://api-docs.mux.com/#video-view-get-1"
    ],
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "videoViewId",
        "description": "The ID for the video view"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/mux.js",
    "content": "/*!\n * Mux\n * Copyright(c) 2018 Mux Inc.\n */\n\nconst Base = require('./base');\nconst Video = require('./video/video');\nconst Data = require('./data/data');\n\n/**\n * Mux Class - Provides access to the Mux Video and Mux Data API\n *\n * @extends Base\n * @type {Video}\n * @property {Video} Mux.Video provides access to the Mux Video API\n * @type {Data}\n * @property {Data} Mux.Data provides access to the Mux Data API\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video, Data } = muxClient;\n *\n * // Create an asset\n * let assetId;\n * Video.assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n *   .then((res) => {\n *     const { data } = res.data;\n *     assetId = data.id;\n *   });\n *\n * // Create a playback Id for an asset\n * Video.playbackIds.create(assetId, { policy: 'public' });\n *\n * // List all of the values across every breakdown for the `aggregate_startup_time` metric\n * Data.metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n */\nclass Mux extends Base {\n  /**\n   * Mux Constructor\n   *\n   * @param {string=process.env.MUX_TOKEN_ID} accessToken - Mux API Access Token\n   * @param {string=process.env.MUX_TOKEN_SECRET} secret - Mux API secret\n   * @param {object} options - Optional configuration object\n   * @param {string='https://api.mux.com'} options.baseUrl - Change the base URL for API requests.\n   * @constructor\n   */\n  constructor(accessTokenOrConfig, secret, config) {\n    super(accessTokenOrConfig, secret, config);\n\n    /** @type {Video} */\n    this.Video = new Video(this);\n\n    /** @type {Data} */\n    this.Data = new Data(this);\n  }\n}\n\nmodule.exports = Mux;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/mux.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "Mux",
    "memberof": "src/mux.js",
    "static": true,
    "longname": "src/mux.js~Mux",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node",
    "importStyle": "Mux",
    "description": "Mux Class - Provides access to the Mux Video and Mux Data API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video, Data } = muxClient;\n\n// Create an asset\nlet assetId;\nVideo.assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n  .then((res) => {\n    const { data } = res.data;\n    assetId = data.id;\n  });\n\n// Create a playback Id for an asset\nVideo.playbackIds.create(assetId, { policy: 'public' });\n\n// List all of the values across every breakdown for the `aggregate_startup_time` metric\nData.metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });"
    ],
    "lineNumber": 36,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Video"
        ],
        "spread": false,
        "optional": false,
        "name": "Mux.Video",
        "description": "provides access to the Mux Video API"
      },
      {
        "nullable": null,
        "types": [
          "Data"
        ],
        "spread": false,
        "optional": false,
        "name": "Mux.Data",
        "description": "provides access to the Mux Data API"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Data"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/mux.js~Mux",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mux.js~Mux#constructor",
    "access": "public",
    "description": "Mux Constructor",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string=process.env.MUX_TOKEN_ID"
        ],
        "spread": false,
        "optional": false,
        "name": "accessToken",
        "description": "Mux API Access Token"
      },
      {
        "nullable": null,
        "types": [
          "string=process.env.MUX_TOKEN_SECRET"
        ],
        "spread": false,
        "optional": false,
        "name": "secret",
        "description": "Mux API secret"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional configuration object"
      },
      {
        "nullable": null,
        "types": [
          "string='https://api.mux.com'"
        ],
        "spread": false,
        "optional": false,
        "name": "options.baseUrl",
        "description": "Change the base URL for API requests."
      }
    ]
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "Video",
    "memberof": "src/mux.js~Mux",
    "static": false,
    "longname": "src/mux.js~Mux#Video",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Video"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "Data",
    "memberof": "src/mux.js~Mux",
    "static": false,
    "longname": "src/mux.js~Mux#Data",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Data"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/video/resources/assets.js",
    "content": "/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base asset path for the Mux API\n * */\nconst PATH = '/video/v1/assets';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = assetId => `${PATH}/${assetId}`;\n\n/**\n * Assets Class - Provides access to the Mux Video Assets API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an asset\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n */\nclass Assets extends Base {\n  /**\n   * Creates a Mux asset with the specified JSON parameters\n   * @extends Base\n   * @param {Object} params - Asset JSON parameters (e.g input)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset\n   * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n   *\n   * @see https://docs.mux.com/reference#create-an-asset\n   */\n  create(params) {\n    if (!params) {\n      return Promise.reject(new Error('Params are required for creating an asset'));\n    }\n\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Deletes a Mux asset\n   * @param {string} assetId - The ID for the asset intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset\n   * Video.Assets.del(assetId);\n   *\n   * @see https://docs.mux.com/reference#delete-an-asset\n   */\n  del(assetId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required to delete an asset'));\n    }\n    return this.http.delete(buildBasePath(assetId));\n  }\n\n  /**\n   * Get an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.Assets.get(assetId);\n   *\n   * @see https://docs.mux.com/reference#retrieve-an-asset\n   */\n  get(assetId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required to get an asset'));\n    }\n    return this.http.get(buildBasePath(assetId));\n  }\n\n  /**\n   * Get input info for an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get input info for an asset\n   * Video.Assets.inputInfo(assetId);\n   *\n   * @see https://docs.mux.com/reference#retrieve-asset-input-info\n   */\n  inputInfo(assetId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required to get input-info'));\n    }\n    return this.http.get(`${buildBasePath(assetId)}/input-info`);\n  }\n\n  /**\n   * List all assets for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all assets for a Mux Environment\n   * Video.Assets.list();\n   *\n   * @see https://docs.mux.com/reference#list-assets\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Return an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the playbackId\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Retrieve an asset playbackId\n   * Video.Assets.playbackId(assetId, playbackId);\n   *\n   * @see https://docs.mux.com/v1/reference#retrieve-an-asset-playback-id\n   */\n  playbackId(assetId, playbackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.get(`${buildBasePath(assetId)}/playback-ids/${playbackId}`);\n  }\n\n  /**\n   * Create an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - Asset JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset playback ID\n   * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/v1/reference#add-an-asset-playback-id\n   */\n  createPlaybackId(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Playback ID params are required'));\n    }\n    return this.http.post(`${buildBasePath(assetId)}/playback-ids`, params);\n  }\n\n  /**\n   * Delete an asset playback ID\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the asset playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset playback ID\n   * Video.Assets.deletePlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/v1/reference#delete-an-asset-playback-id\n   */\n  deletePlaybackId(assetId, playbackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.delete(`${buildBasePath(assetId)}/playback-ids/${playbackId}`);\n  }\n}\n\nmodule.exports = Assets;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/video/resources/assets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/video/resources/assets.js",
    "static": true,
    "longname": "src/video/resources/assets.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/assets.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "buildBasePath",
    "memberof": "src/video/resources/assets.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/video/resources/assets.js~buildBasePath",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/assets.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "name": "assetId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "Assets",
    "memberof": "src/video/resources/assets.js",
    "static": true,
    "longname": "src/video/resources/assets.js~Assets",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/resources/assets.js",
    "importStyle": "Assets",
    "description": "Assets Class - Provides access to the Mux Video Assets API",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create an asset\nVideo.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});"
    ],
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "create",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#create",
    "access": "public",
    "description": "Creates a Mux asset with the specified JSON parameters",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create an asset\nVideo.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});"
    ],
    "see": [
      "https://docs.mux.com/reference#create-an-asset"
    ],
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "Base"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Asset JSON parameters (e.g input)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "del",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#del",
    "access": "public",
    "description": "Deletes a Mux asset",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete an asset\nVideo.Assets.del(assetId);"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-an-asset"
    ],
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset intended for deletion"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "get",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#get",
    "access": "public",
    "description": "Get an asset",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get an asset\nVideo.Assets.get(assetId);"
    ],
    "see": [
      "https://docs.mux.com/reference#retrieve-an-asset"
    ],
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "inputInfo",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#inputInfo",
    "access": "public",
    "description": "Get input info for an asset",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get input info for an asset\nVideo.Assets.inputInfo(assetId);"
    ],
    "see": [
      "https://docs.mux.com/reference#retrieve-asset-input-info"
    ],
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "list",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#list",
    "access": "public",
    "description": "List all assets for a Mux Environment (tied to your access token)",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// List all assets for a Mux Environment\nVideo.Assets.list();"
    ],
    "see": [
      "https://docs.mux.com/reference#list-assets"
    ],
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "playbackId",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#playbackId",
    "access": "public",
    "description": "Return an asset playback id",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Retrieve an asset playbackId\nVideo.Assets.playbackId(assetId, playbackId);"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#retrieve-an-asset-playback-id"
    ],
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "playbackId",
        "description": "The ID for the playbackId"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "createPlaybackId",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#createPlaybackId",
    "access": "public",
    "description": "Create an asset playback id",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create an asset playback ID\nVideo.Assets.createPlaybackId(assetId, { policy: 'public' });"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#add-an-asset-playback-id"
    ],
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Asset JSON parameters (e.g playback_policy)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "deletePlaybackId",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#deletePlaybackId",
    "access": "public",
    "description": "Delete an asset playback ID",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete an asset playback ID\nVideo.Assets.deletePlaybackId(assetId, { policy: 'public' });"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#delete-an-asset-playback-id"
    ],
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "playbackId",
        "description": "The ID for the asset playback ID to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/video/resources/liveStreams.js",
    "content": "/*!\n * Mux Live Streams\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base live stream path for the Mux API\n * */\nconst PATH = '/video/v1/live-streams';\n\n/**\n * @private\n * Build the base live stream path for the Mux API\n * */\nconst buildBasePath = liveStreamId => `${PATH}/${liveStreamId}`;\n\n/**\n * Live Streams Class - Provides access to the Mux Video Live Streams API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create a live stream\n * Video.LiveStreams.create({\n *  playback_policy: 'public',\n *  new_asset_settings: { playback_policy: 'public' }\n * });\n */\nclass LiveStreams extends Base {\n  /**\n   * Creates a Mux live stream with the specified JSON parameters\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a live stream\n   * Video.LiveStreams.create({\n   *  playback_policy: 'public',\n   *  new_asset_settings: { playback_policy: 'public' }\n   * });\n   *\n   * @see https://docs.mux.com/reference#create-a-live-stream\n   */\n  create(params) {\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Deletes a Mux Live Stream\n   * @param {string} liveStreamId - The ID for the live stream intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a mux live stream\n   * Video.LiveStreams.del(liveStreamId);\n   *\n   * @see https://docs.mux.com/reference#delete-a-live-stream\n   */\n  del(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to delete a live stream'));\n    }\n    return this.http.delete(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * Get an Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live stream\n   * Video.LiveStreams.get(liveStreamId);\n   *\n   * @see https://docs.mux.com/reference#retrieve-a-live-stream\n   */\n  get(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to get a live stream'));\n    }\n    return this.http.get(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * List all live streams for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all live streams for a Mux Environment\n   * Video.LiveStreams.list();\n   *\n   * @see https://docs.mux.com/reference#list-live-streams\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Signal a live stream is finished\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Signal a live stream is finished\n   * Video.LiveStreams.signalComplete(liveStreamId);\n   *\n   * @see https://docs.mux.com/reference#signal-live-stream-complete\n   */\n  signalComplete(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A Live Stream ID is required to signal a stream is complete'));\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/complete`);\n  }\n\n  /**\n   * Reset a stream key\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Reset a live stream key if you want to immediately stop the current stream key\n   * // from working and create a new stream key that can be used for future broadcasts.\n   * Video.LiveStreams.resetStreamKey(liveStreamId);\n   *\n   * @see https://docs.mux.com/reference#reset-a-stream-key\n   */\n  resetStreamKey(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A Live Stream ID is required to reset a live stream key'));\n    }\n    return this.http.post(`${buildBasePath(liveStreamId)}/reset-stream-key`);\n  }\n\n  /**\n   * Create a live stream playback id\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live stream playback ID\n   * Video.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/reference#add-a-live-stream-playback-id\n   */\n  createPlaybackId(liveStreamId, params) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A Live Stream ID is required to create a live stream playback ID'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('A playback policy is required to create a live stream playback ID'));\n    }\n    return this.http.post(`${buildBasePath(liveStreamId)}/playback-ids`, params);\n  }\n\n  /**\n   * Delete a live stream playback ID\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} playbackId - The ID for the live stream playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a live stream playback ID\n   * Video.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/reference#delete-a-live-stream-playback-id\n   */\n  deletePlaybackId(liveStreamId, playbackId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A Live Stream ID is required to delete a live stream playback ID'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A live stream playback ID is required to delete a live stream playback ID'));\n    }\n    return this.http.delete(`${buildBasePath(liveStreamId)}/playback-ids/${playbackId}`);\n  }\n}\n\nmodule.exports = LiveStreams;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/video/resources/liveStreams.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/video/resources/liveStreams.js",
    "static": true,
    "longname": "src/video/resources/liveStreams.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/liveStreams.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "buildBasePath",
    "memberof": "src/video/resources/liveStreams.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/video/resources/liveStreams.js~buildBasePath",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/liveStreams.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "name": "liveStreamId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "LiveStreams",
    "memberof": "src/video/resources/liveStreams.js",
    "static": true,
    "longname": "src/video/resources/liveStreams.js~LiveStreams",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/resources/liveStreams.js",
    "importStyle": "LiveStreams",
    "description": "Live Streams Class - Provides access to the Mux Video Live Streams API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video } = muxClient;\n\n// Create a live stream\nVideo.LiveStreams.create({\n playback_policy: 'public',\n new_asset_settings: { playback_policy: 'public' }\n});"
    ],
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "create",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#create",
    "access": "public",
    "description": "Creates a Mux live stream with the specified JSON parameters",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video } = muxClient;\n\n// Create a live stream\nVideo.LiveStreams.create({\n playback_policy: 'public',\n new_asset_settings: { playback_policy: 'public' }\n});"
    ],
    "see": [
      "https://docs.mux.com/reference#create-a-live-stream"
    ],
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Live Stream JSON parameters (e.g playback_policy)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "del",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#del",
    "access": "public",
    "description": "Deletes a Mux Live Stream",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete a mux live stream\nVideo.LiveStreams.del(liveStreamId);"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-a-live-stream"
    ],
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream intended for deletion"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "get",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#get",
    "access": "public",
    "description": "Get an Live Stream",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get a live stream\nVideo.LiveStreams.get(liveStreamId);"
    ],
    "see": [
      "https://docs.mux.com/reference#retrieve-a-live-stream"
    ],
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "list",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#list",
    "access": "public",
    "description": "List all live streams for a Mux Environment (tied to your access token)",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// List all live streams for a Mux Environment\nVideo.LiveStreams.list();"
    ],
    "see": [
      "https://docs.mux.com/reference#list-live-streams"
    ],
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "signalComplete",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#signalComplete",
    "access": "public",
    "description": "Signal a live stream is finished",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Signal a live stream is finished\nVideo.LiveStreams.signalComplete(liveStreamId);"
    ],
    "see": [
      "https://docs.mux.com/reference#signal-live-stream-complete"
    ],
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "resetStreamKey",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#resetStreamKey",
    "access": "public",
    "description": "Reset a stream key",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Reset a live stream key if you want to immediately stop the current stream key\n// from working and create a new stream key that can be used for future broadcasts.\nVideo.LiveStreams.resetStreamKey(liveStreamId);"
    ],
    "see": [
      "https://docs.mux.com/reference#reset-a-stream-key"
    ],
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "createPlaybackId",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#createPlaybackId",
    "access": "public",
    "description": "Create a live stream playback id",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create a live stream playback ID\nVideo.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });"
    ],
    "see": [
      "https://docs.mux.com/reference#add-a-live-stream-playback-id"
    ],
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Live Stream JSON parameters (e.g playback_policy)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "deletePlaybackId",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#deletePlaybackId",
    "access": "public",
    "description": "Delete a live stream playback ID",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete a live stream playback ID\nVideo.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-a-live-stream-playback-id"
    ],
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "playbackId",
        "description": "The ID for the live stream playback ID to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/video/resources/uploads.js",
    "content": "/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base asset path for the Mux API\n * */\nconst PATH = '/video/v1/uploads';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = uploadId => `${PATH}/${uploadId}`;\n\n/**\n * Uploads Class - Provides access to the Mux Video Uploads API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an upload\n * Video.Uploads.create({ new_asset_settings: { playback_policy: 'public' } });\n */\nclass Uploads extends Base {\n  /**\n   * Creates a direct upload with the specified JSON parameters\n   * @extends Base\n   * @param {Object} params - Upload JSON parameters (e.g timeout)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a new upload\n   * const upload = await Video.Uploads.create({new_asset_settings: {playback_policy: 'public'}});\n   * // Now push a file to the URL returned.\n   * fs.createReadStream(pathToFile).pipe(request.put(upload.url))\n   *\n   * @see https://docs.mux.com/reference#upload-an-asset\n   */\n  create(params) {\n    if (!params) {\n      return Promise.reject(new Error('Params are required for creating a direct upload'));\n    }\n\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Cancels an upload\n   * @param {string} uploadId - The ID for the upload intended for cancellation\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an upload\n   * Video.Uploads.cancel(uploadId);\n   *\n   * @see https://docs.mux.com/reference#delete-an-asset\n   */\n  cancel(uploadId) {\n    if (!uploadId) {\n      return Promise.reject(new Error('An upload ID is required'));\n    }\n    return this.http.put(`${buildBasePath(uploadId)}/cancel`);\n  }\n\n  /**\n   * Get an upload\n   * @param {string} uploadId - The ID for the upload\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.Uploads.get(uploadId);\n   *\n   * @see https://docs.mux.com/reference#retrieve-an-asset\n   */\n  get(uploadId) {\n    if (!uploadId) {\n      return Promise.reject(new Error('An upload ID is required to get an asset'));\n    }\n    return this.http.get(buildBasePath(uploadId));\n  }\n}\n\nmodule.exports = Uploads;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/video/resources/uploads.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/video/resources/uploads.js",
    "static": true,
    "longname": "src/video/resources/uploads.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/uploads.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "buildBasePath",
    "memberof": "src/video/resources/uploads.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/video/resources/uploads.js~buildBasePath",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/uploads.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "name": "uploadId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "Uploads",
    "memberof": "src/video/resources/uploads.js",
    "static": true,
    "longname": "src/video/resources/uploads.js~Uploads",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/resources/uploads.js",
    "importStyle": "Uploads",
    "description": "Uploads Class - Provides access to the Mux Video Uploads API",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create an upload\nVideo.Uploads.create({ new_asset_settings: { playback_policy: 'public' } });"
    ],
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "create",
    "memberof": "src/video/resources/uploads.js~Uploads",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/uploads.js~Uploads#create",
    "access": "public",
    "description": "Creates a direct upload with the specified JSON parameters",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video } = muxClient;\n\n// Create a new upload\nconst upload = await Video.Uploads.create({new_asset_settings: {playback_policy: 'public'}});\n// Now push a file to the URL returned.\nfs.createReadStream(pathToFile).pipe(request.put(upload.url))"
    ],
    "see": [
      "https://docs.mux.com/reference#upload-an-asset"
    ],
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "Base"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Upload JSON parameters (e.g timeout)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "cancel",
    "memberof": "src/video/resources/uploads.js~Uploads",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/uploads.js~Uploads#cancel",
    "access": "public",
    "description": "Cancels an upload",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete an upload\nVideo.Uploads.cancel(uploadId);"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-an-asset"
    ],
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uploadId",
        "description": "The ID for the upload intended for cancellation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "get",
    "memberof": "src/video/resources/uploads.js~Uploads",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/uploads.js~Uploads#get",
    "access": "public",
    "description": "Get an upload",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get an asset\nVideo.Uploads.get(uploadId);"
    ],
    "see": [
      "https://docs.mux.com/reference#retrieve-an-asset"
    ],
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uploadId",
        "description": "The ID for the upload"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/video/video.js",
    "content": "/*!\n * Mux Video\n * Copyright(c) 2018 Mux Inc.\n */\n\nconst Assets = require('./resources/assets');\nconst Base = require('../base');\nconst LiveStreams = require('./resources/liveStreams');\nconst Uploads = require('./resources/uploads');\n\n/**\n * @ignore\n * @extends Base\n * Video Class - Provides access to the Mux Video API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create an asset\n * Video.assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n *\n * // Create a playback Id for an asset\n * Video.playbackIds.create('assetId', { policy: 'public' });\n */\nclass Video extends Base {\n  /**\n   * Video Constructor\n   *\n   * @param {string} accessToken - Mux API Access Token\n   * @param {string} secret - Mux API secret\n   * @constructor\n   */\n  constructor(...params) {\n    super(...params);\n\n    /** @type {Assets} */\n    this.Assets = new Assets(this);\n\n    /** @type {LiveStreams} */\n    this.LiveStreams = new LiveStreams(this);\n\n    /** @Type {Uploads} */\n    this.Uploads = new Uploads(this);\n  }\n}\n\nmodule.exports = Video;\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/src/video/video.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "Video",
    "memberof": "src/video/video.js",
    "static": true,
    "longname": "src/video/video.js~Video",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/video.js",
    "importStyle": "Video",
    "description": "",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video } = muxClient;\n\n// Create an asset\nVideo.assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n\n// Create a playback Id for an asset\nVideo.playbackIds.create('assetId', { policy: 'public' });"
    ],
    "lineNumber": 26,
    "ignore": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 120,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/video/video.js~Video",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/video.js~Video#constructor",
    "access": "public",
    "description": "Video Constructor",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accessToken",
        "description": "Mux API Access Token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secret",
        "description": "Mux API secret"
      }
    ]
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "Assets",
    "memberof": "src/video/video.js~Video",
    "static": false,
    "longname": "src/video/video.js~Video#Assets",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Assets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "LiveStreams",
    "memberof": "src/video/video.js~Video",
    "static": false,
    "longname": "src/video/video.js~Video#LiveStreams",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "LiveStreams"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "Uploads",
    "memberof": "src/video/video.js~Video",
    "static": false,
    "longname": "src/video/video.js~Video#Uploads",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@Type",
        "tagValue": "{Uploads}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Mux Node SDK\n\n![build status](https://api.travis-ci.org/muxinc/mux-node-sdk.svg?branch=master) ![npm version](https://badge.fury.io/js/%40mux%2Fmux-node.svg)\n\nOfficial Mux API wrapper for Node projects.\n\nThis library is intended to provide Mux API convenience methods for applications written in server-side Javascript. __Please note__ that this package uses Mux access tokens and secret keys and is intended to be used in server-side code only.\n\nNot familiar with Mux? Check out https://mux.com/ for more information.\n\n## Documentation\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk)\n\n## Installation\n```\nnpm install @mux/mux-node --save\n```\nor\n```\nyarn add @mux/mux-node\n```\n\n## Releases\nThe latest **stable** release is `2.0.0`\n\nPlease keep in mind that master contains edge, so at any point it may be out of sync with what's in the latest stable release. Please consult the [releases](https://github.com/muxinc/mux-node-sdk/releases) page for both stable releases and release candidates.\n\n## Usage\nTo start, you will need a Mux access token and secret for your Mux environment. For more information on where to get\nan access token, visit the Mux Getting Started guide https://docs.mux.com/docs\n\nRequire the `@mux/mux-node` npm module and create a Mux instance. Your Mux instance will have `Data` and `Video` properties\nthat will allow you to access the Mux Data and Video APIs.\n\n```javascript\nconst Mux = require('@mux/mux-node');\nconst { Video, Data } = new Mux(accessToken, secret);\n```\n\nIf a token ID and secret aren't included as parameters, the SDK will attempt to use the `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` environment variables.\n\n```javascript\n// assume process.env.MUX_TOKEN_ID and process.env.MUX_TOKEN_SECRET contain your credentials\nconst muxClient = new Mux(); // Success!\n```\n\nAs an example, you can create a Mux asset and playback ID by using the below functions on your Video instance.\n```javascript\n// Create an asset\nconst asset = await Video.assets.create({ input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4' });\n```\n\n```javascript\n// ...then later, a playback ID for that asset\nconst playbackId = await Video.assets.createPlaybackId(asset.id, { policy: 'public' });\n```\n\nOr, if you don't have the files online already, you can ingest one via the direct uploads API.\n\n```javascript\nconst request = require('request');\nlet upload = await Video.Upload.create({ new_asset_settings: { playback_policy: 'public' }});\n\n// The URL you get back from the upload API is resumable, and the file can be uploaded using a `PUT` request (or a series of them).\nawait fs.createReadStream('/path/to/your/file').pipe(request.put(upload.url));\n\n// The upload may not be updated immediately, but shortly after the upload is finished you'll get a `video.asset.created` event and the upload will now have a status of `asset_created` and a new `asset_id` key.\nlet updatedUpload = await Video.Upload.get(upload.id);\n\n// Or you could decide to go get additional information about that new asset you created.\nlet asset = await Video.Assets.get(updatedUpload['asset_id']);\n```\n\nYou can access the Mux Data API in the same way by using your Data instance. For example, you can list all of the\nvalues across every breakdown for the `aggregate_startup_time` metric by using the below function.\n\n```javascript\nconst breakdown = await Data.metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n```\n\nEvery function will return a chainable [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n```javascript\nVideo.assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'\n}).then(asset => {\n  /* Do things with the asset */\n});\n```\n\n## `request` and `response` events\n\nThe SDK returns the `data` key for every object, because in the Mux API that's always the thing you actually want to see. Sometimes, however, it's useful to see more details about the request being made or the full response object. You can listen for `request` and `response` events to get these raw objects.\n\n```javascript\nmuxClient.on('request', req => {\n  // Request will contain everything being sent such as `headers, method, base url, etc\n});\n\nmuxClient.on('response', res => {\n  // Response will include everything returned from the API, such as status codes/text, headers, etc\n});\n```\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk/identifiers.html) for a list of all available functions.\n\n## Development\n\nRun unit tests: `npm test` or `npm run test:unit`\n\nRun integration tests: `npm run test:int`\n\n__Note__: running the integration tests will require you to configure the `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` environment variables with your Mux access token and secret.\n\n\nTo generate the ESDocs, run:\n```\nyarn esdoc\nopen ./docs/index.html\n```\n\n## Contributing\n\nFind a bug or want to add a useful feature? That'd be amazing! If you'd like to submit a [pull request](https://help.github.com/articles/about-pull-requests/) to the project with changes, please do something along these lines:\n\n1. Fork the project wherever you'd like\n2. Create a meaningful branch name that relates to your contribution. Consider including an issue number if available. `git co -b add-node-lts-support`\n3. Make any changes you'd like in your forked branch.\n4. Add any relevant tests for your changes\n5. Open the pull request! :tada:\n",
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@mux/mux-node\",\n  \"version\": \"2.0.0-0\",\n  \"description\": \"Mux API wrapper\",\n  \"keywords\": [\n    \"mux\",\n    \"video\",\n    \"video encoding\",\n    \"video transcoding\",\n    \"api\",\n    \"video analytics\",\n    \"live streaming\"\n  ],\n  \"author\": \"Mux <help@mux.com> (https://mux.com/)\",\n  \"main\": \"src/mux.js\",\n  \"engines\": {\n    \"node\": \">=8\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"docs\": \"esdoc\",\n    \"test\": \"mocha --recursive ./test/unit\",\n    \"test:unit\": \"mocha --recursive ./test/unit\",\n    \"test:int\": \"mocha --recursive ./test/integration\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.18.0\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.1.2\",\n    \"dotenv\": \"^5.0.1\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-node\": \"^1.0.3\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.19.1\",\n    \"eslint-config-airbnb-base\": \"^12.1.0\",\n    \"eslint-plugin-chai-friendly\": \"^0.4.1\",\n    \"eslint-plugin-import\": \"^2.9.0\",\n    \"eslint-plugin-node\": \"^6.0.1\",\n    \"mocha\": \"^5.1.1\",\n    \"moxios\": \"^0.4.0\",\n    \"sinon\": \"^4.5.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/muxinc/mux-node-sdk.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/muxinc/mux-node-sdk/issues\"\n  },\n  \"homepage\": \"https://github.com/muxinc/mux-node-sdk#readme\"\n}\n",
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# Mux Node SDK\n\n![build status](https://api.travis-ci.org/muxinc/mux-node-sdk.svg?branch=master) ![npm version](https://badge.fury.io/js/%40mux%2Fmux-node.svg)\n\nOfficial Mux API wrapper for Node projects.\n\nThis library is intended to provide Mux API convenience methods for applications written in server-side Javascript. __Please note__ that this package uses Mux access tokens and secret keys and is intended to be used in server-side code only.\n\nNot familiar with Mux? Check out https://mux.com/ for more information.\n\n## Documentation\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk)\n\n## Installation\n```\nnpm install @mux/mux-node --save\n```\nor\n```\nyarn add @mux/mux-node\n```\n\n## Releases\nThe latest **stable** release is `2.0.0`\n\nPlease keep in mind that master contains edge, so at any point it may be out of sync with what's in the latest stable release. Please consult the [releases](https://github.com/muxinc/mux-node-sdk/releases) page for both stable releases and release candidates.\n\n## Usage\nTo start, you will need a Mux access token and secret for your Mux environment. For more information on where to get\nan access token, visit the Mux Getting Started guide https://docs.mux.com/docs\n\nRequire the `@mux/mux-node` npm module and create a Mux instance. Your Mux instance will have `Data` and `Video` properties\nthat will allow you to access the Mux Data and Video APIs.\n\n```javascript\nconst Mux = require('@mux/mux-node');\nconst { Video, Data } = new Mux(accessToken, secret);\n```\n\nIf a token ID and secret aren't included as parameters, the SDK will attempt to use the `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` environment variables.\n\n```javascript\n// assume process.env.MUX_TOKEN_ID and process.env.MUX_TOKEN_SECRET contain your credentials\nconst muxClient = new Mux(); // Success!\n```\n\nAs an example, you can create a Mux asset and playback ID by using the below functions on your Video instance.\n```javascript\n// Create an asset\nconst asset = await Video.assets.create({ input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4' });\n```\n\n```javascript\n// ...then later, a playback ID for that asset\nconst playbackId = await Video.assets.createPlaybackId(asset.id, { policy: 'public' });\n```\n\nOr, if you don't have the files online already, you can ingest one via the direct uploads API.\n\n```javascript\nconst request = require('request');\nlet upload = await Video.Upload.create({ new_asset_settings: { playback_policy: 'public' }});\n\n// The URL you get back from the upload API is resumable, and the file can be uploaded using a `PUT` request (or a series of them).\nawait fs.createReadStream('/path/to/your/file').pipe(request.put(upload.url));\n\n// The upload may not be updated immediately, but shortly after the upload is finished you'll get a `video.asset.created` event and the upload will now have a status of `asset_created` and a new `asset_id` key.\nlet updatedUpload = await Video.Upload.get(upload.id);\n\n// Or you could decide to go get additional information about that new asset you created.\nlet asset = await Video.Assets.get(updatedUpload['asset_id']);\n```\n\nYou can access the Mux Data API in the same way by using your Data instance. For example, you can list all of the\nvalues across every breakdown for the `aggregate_startup_time` metric by using the below function.\n\n```javascript\nconst breakdown = await Data.metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n```\n\nEvery function will return a chainable [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n```javascript\nVideo.assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'\n}).then(asset => {\n  /* Do things with the asset */\n});\n```\n\n## `request` and `response` events\n\nThe SDK returns the `data` key for every object, because in the Mux API that's always the thing you actually want to see. Sometimes, however, it's useful to see more details about the request being made or the full response object. You can listen for `request` and `response` events to get these raw objects.\n\n```javascript\nmuxClient.on('request', req => {\n  // Request will contain everything being sent such as `headers, method, base url, etc\n});\n\nmuxClient.on('response', res => {\n  // Response will include everything returned from the API, such as status codes/text, headers, etc\n});\n```\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk/identifiers.html) for a list of all available functions.\n\n## Development\n\nRun unit tests: `npm test` or `npm run test:unit`\n\nRun integration tests: `npm run test:int`\n\n__Note__: running the integration tests will require you to configure the `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` environment variables with your Mux access token and secret.\n\n\nTo generate the ESDocs, run:\n```\nyarn esdoc\nopen ./docs/index.html\n```\n\n## Contributing\n\nFind a bug or want to add a useful feature? That'd be amazing! If you'd like to submit a [pull request](https://help.github.com/articles/about-pull-requests/) to the project with changes, please do something along these lines:\n\n1. Fork the project wherever you'd like\n2. Create a meaningful branch name that relates to your contribution. Consider including an issue number if available. `git co -b add-node-lts-support`\n3. Make any changes you'd like in your forked branch.\n4. Add any relevant tests for your changes\n5. Open the pull request! :tada:\n",
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "test overview\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 124,
    "kind": "testFile",
    "name": "test/unit/base.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst Base = require('../../src/base');\n\n/** @test {Mux} */\ndescribe('Unit::Base', () => {\n  /** @test {Base} */\n  describe('Base', () => {\n    /** @test {Base} */\n    it('allows configuration to be passed in as params', () => {\n      const baseClient = new Base('testKey', 'testSecret');\n      expect(baseClient.tokenId).to.be.eq('testKey');\n      expect(baseClient.tokenSecret).to.be.eq('testSecret');\n    });\n\n    it('allows configuration to be passed in via environment variables', () => {\n      process.env.MUX_TOKEN_ID = 'testKey';\n      process.env.MUX_TOKEN_SECRET = 'testSecret';\n      const baseClient = new Base();\n      expect(baseClient.tokenId).to.be.eq('testKey');\n      expect(baseClient.tokenSecret).to.be.eq('testSecret');\n    });\n\n    it('prioritizes params over environment variables', () => {\n      process.env.MUX_TOKEN_ID = 'crusty-old-id';\n      process.env.MUX_TOKEN_SECRET = 'crusty-old-secret';\n      const baseClient = new Base('fancy-new-id', 'fancy-new-secret');\n      expect(baseClient.tokenId).to.be.eq('fancy-new-id');\n      expect(baseClient.tokenSecret).to.be.eq('fancy-new-secret');\n    });\n\n    it('allows configuration to be passed in via the parent instance', () => {\n      const parentBase = new Base('testKey', 'testSecret');\n      const childBase = new Base(parentBase);\n      expect(childBase.tokenId).to.be.eq(parentBase.tokenId);\n      expect(childBase.tokenSecret).to.be.eq(parentBase.tokenSecret);\n    });\n\n    describe('http requests', () => {\n      let baseClient;\n\n      beforeEach(() => {\n        baseClient = new Base('fancy-new-id', 'fancy-new-secret');\n        moxios.install(baseClient.http);\n\n        moxios.stubRequest('https://api.mux.com/test/v1/foo', {\n          status: 200,\n          responseText: '{\"data\": [\"something\", \"very\", \"fun\"]}',\n        });\n      });\n\n      afterEach(() => {\n        delete process.env.MUX_TOKEN_ID;\n        delete process.env.MUX_TOKEN_SECRET;\n        moxios.uninstall(baseClient.http);\n      });\n\n      it('fire an event on a request', (done) => {\n        baseClient.on('request', (req) => {\n          expect(req.auth.username).to.equal('fancy-new-id');\n          expect(req.auth.password).to.equal('fancy-new-secret');\n          expect(req.baseURL).to.equal('https://api.mux.com');\n          expect(req.url).to.equal('/test/v1/foo');\n          done();\n        });\n\n        baseClient.http.get('/test/v1/foo');\n      });\n\n      it('fire an event on a response', (done) => {\n        baseClient.on('response', (res) => {\n          expect(res.status).to.equal(200);\n          expect(res.data).to.eql({ data: ['something', 'very', 'fun'] });\n          done();\n        });\n\n        baseClient.http.get('/test/v1/foo');\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/base.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/unit/base.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0",
    "access": null,
    "description": "Unit::Base",
    "lineNumber": 6,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/unit/base.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1",
    "access": null,
    "description": "Base",
    "lineNumber": 8,
    "testTargets": [
      "Base"
    ]
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "allows configuration to be passed in as params",
    "lineNumber": 10,
    "testTargets": [
      "Base"
    ]
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.it3",
    "access": null,
    "description": "allows configuration to be passed in via environment variables",
    "lineNumber": 16
  },
  {
    "__docId__": 129,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.it4",
    "access": null,
    "description": "prioritizes params over environment variables",
    "lineNumber": 24
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.it5",
    "access": null,
    "description": "allows configuration to be passed in via the parent instance",
    "lineNumber": 32
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.describe6",
    "access": null,
    "description": "http requests",
    "lineNumber": 39
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/unit/base.spec.js~describe0.describe1.describe6",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.describe6.it7",
    "access": null,
    "description": "fire an event on a request",
    "lineNumber": 58
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/unit/base.spec.js~describe0.describe1.describe6",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.describe6.it8",
    "access": null,
    "description": "fire an event on a response",
    "lineNumber": 70
  },
  {
    "__docId__": 134,
    "kind": "testFile",
    "name": "test/unit/data/data.spec.js",
    "content": "const { expect } = require('chai');\nconst Data = require('../../../src/data/data');\nconst Metrics = require('../../../src/data/resources/metrics');\nconst Filters = require('../../../src/data/resources/filters');\nconst Errors = require('../../../src/data/resources/errors');\nconst VideoViews = require('../../../src/data/resources/video_views');\nconst Exports = require('../../../src/data/resources/exports');\n\n/** @test {Data} */\ndescribe('Unit::Data', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n\n  /** @test {Data} */\n  describe('Data', () => {\n    /** @test {Data} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Data()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Data} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Data(testApiKey)).to.throw('API secret key must be provided');\n    });\n\n    /** @test {Data} */\n    it('creates a new Data instance', () => {\n      const TestData = new Data(testApiKey, testSecret);\n      expect(() => new Data(testApiKey, testSecret)).to.not.throw();\n      expect(TestData.Metrics).to.be.an.instanceof(Metrics);\n      expect(TestData.Errors).to.be.an.instanceof(Errors);\n      expect(TestData.Exports).to.be.an.instanceof(Exports);\n      expect(TestData.VideoViews).to.be.an.instanceof(VideoViews);\n      expect(TestData.Filters).to.be.an.instanceof(Filters);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/data/data.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/unit/data/data.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9",
    "access": null,
    "description": "Unit::Data",
    "lineNumber": 10,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "test/unit/data/data.spec.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9.describe10",
    "access": null,
    "description": "Data",
    "lineNumber": 15,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/unit/data/data.spec.js~describe9.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9.describe10.it11",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 17,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/unit/data/data.spec.js~describe9.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9.describe10.it12",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 22,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/unit/data/data.spec.js~describe9.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9.describe10.it13",
    "access": null,
    "description": "creates a new Data instance",
    "lineNumber": 27,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 140,
    "kind": "testFile",
    "name": "test/unit/data/resources/errors.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst Errors = require('../../../../src/data/resources/errors');\n\n/** @test {Errors} */\ndescribe('Unit::Errors', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const errorsInstance = new Errors(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(errorsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(errorsInstance.http);\n  });\n\n  /** @test {Errors} */\n  describe('Errors', () => {\n    /** @test {Errors} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Errors()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Errors} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Errors(testApiKey)).to.throw('API secret key must be provided');\n    });\n\n    /** @test {Errors} */\n    it('creates a new Errors instance', () => {\n      const TestErrors = new Errors(testApiKey, testSecret);\n      expect(() => new Errors(testApiKey, testSecret)).to.not.throw();\n      expect(TestErrors.tokenId).to.equal(testApiKey);\n      expect(TestErrors.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Errors.list} */\n  describe('Errors.list', () => {\n    /** @test {Errors.list} */\n    it('makes a get request to the Mux data errors route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/errors', {\n        status: 200,\n        responseText: '{\"data\": {\"errors\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      errorsInstance.list({})\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].errors).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/data/resources/errors.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/unit/data/resources/errors.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14",
    "access": null,
    "description": "Unit::Errors",
    "lineNumber": 7,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe15",
    "access": null,
    "description": "Errors",
    "lineNumber": 21,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe15.it16",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe15.it17",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 28,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe15.it18",
    "access": null,
    "description": "creates a new Errors instance",
    "lineNumber": 33,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe19",
    "access": null,
    "description": "Errors.list",
    "lineNumber": 42,
    "testTargets": [
      "Errors.list"
    ]
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe19.it20",
    "access": null,
    "description": "makes a get request to the Mux data errors route",
    "lineNumber": 44,
    "testTargets": [
      "Errors.list"
    ]
  },
  {
    "__docId__": 148,
    "kind": "testFile",
    "name": "test/unit/data/resources/exports.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst Exports = require('../../../../src/data/resources/exports');\n\n/** @test {Exports} */\ndescribe('Unit::Exports', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const exportsInstance = new Exports(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(exportsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(exportsInstance.http);\n  });\n\n  /** @test {Exports} */\n  describe('Exports', () => {\n    /** @test {Exports} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Exports()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Exports} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Exports(testApiKey)).to.throw('API secret key must be provided');\n    });\n\n    /** @test {Exports} */\n    it('creates a new Exports instance', () => {\n      const TestExports = new Exports(testApiKey, testSecret);\n      expect(() => new Exports(testApiKey, testSecret)).to.not.throw();\n      expect(TestExports.tokenId).to.equal(testApiKey);\n      expect(TestExports.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Exports.list} */\n  describe('Exports.list', () => {\n    /** @test {Exports.list} */\n    it('makes a get request to the Mux data exports route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/exports', {\n        status: 200,\n        responseText: '{\"data\": {\"exports\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      exportsInstance.list({})\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].exports).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/data/resources/exports.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/unit/data/resources/exports.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21",
    "access": null,
    "description": "Unit::Exports",
    "lineNumber": 7,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe22",
    "access": null,
    "description": "Exports",
    "lineNumber": 21,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe22.it23",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe22.it24",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 28,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe22.it25",
    "access": null,
    "description": "creates a new Exports instance",
    "lineNumber": 33,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe26",
    "access": null,
    "description": "Exports.list",
    "lineNumber": 42,
    "testTargets": [
      "Exports.list"
    ]
  },
  {
    "__docId__": 155,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe26.it27",
    "access": null,
    "description": "makes a get request to the Mux data exports route",
    "lineNumber": 44,
    "testTargets": [
      "Exports.list"
    ]
  },
  {
    "__docId__": 156,
    "kind": "testFile",
    "name": "test/unit/data/resources/filters.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst Filters = require('../../../../src/data/resources/filters');\n\n/** @test {Filters} */\ndescribe('Unit::Filters', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const filtersInstance = new Filters(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(filtersInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(filtersInstance.http);\n  });\n\n  /** @test {Filters} */\n  describe('Filters', () => {\n    /** @test {Filters} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Filters()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Filters} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Filters(testApiKey)).to.throw('API secret key must be provided');\n    });\n\n    /** @test {Filters} */\n    it('creates a new Filters instance', () => {\n      const TestFilters = new Filters(testApiKey, testSecret);\n      expect(() => new Filters(testApiKey, testSecret)).to.not.throw();\n      expect(TestFilters.tokenId).to.equal(testApiKey);\n      expect(TestFilters.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Filters.list} */\n  describe('Filters.list', () => {\n    /** @test {Filters.list} */\n    it('makes a get request to the Mux data filters route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/filters', {\n        status: 200,\n        responseText: '{\"data\": {\"filters\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      filtersInstance.list({})\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].filters).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Filters.get} */\n  describe('Filters.get', () => {\n    /** @test {Filters.get} */\n    it('throws an error if a filter Id is not provided', () => {\n      expect(() => filtersInstance.get()).to.throw('Filter Id is required to get filter information.');\n    });\n\n    /** @test {Filters.get} */\n    it('makes a get request to the Mux data filters route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/filters/someFilter', {\n        status: 200,\n        responseText: '{\"data\": {\"filters\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      filtersInstance.get('someFilter', {})\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].filters).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/data/resources/filters.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "test/unit/data/resources/filters.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28",
    "access": null,
    "description": "Unit::Filters",
    "lineNumber": 7,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 158,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe29",
    "access": null,
    "description": "Filters",
    "lineNumber": 21,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 159,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe29.it30",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe29.it31",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 28,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 161,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe29.it32",
    "access": null,
    "description": "creates a new Filters instance",
    "lineNumber": 33,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "describe33",
    "testId": 33,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe33",
    "access": null,
    "description": "Filters.list",
    "lineNumber": 42,
    "testTargets": [
      "Filters.list"
    ]
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe33",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe33.it34",
    "access": null,
    "description": "makes a get request to the Mux data filters route",
    "lineNumber": 44,
    "testTargets": [
      "Filters.list"
    ]
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe35",
    "access": null,
    "description": "Filters.get",
    "lineNumber": 62,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe35",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe35.it36",
    "access": null,
    "description": "throws an error if a filter Id is not provided",
    "lineNumber": 64,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe35",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe35.it37",
    "access": null,
    "description": "makes a get request to the Mux data filters route",
    "lineNumber": 69,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 167,
    "kind": "testFile",
    "name": "test/unit/data/resources/metrics.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst Metrics = require('../../../../src/data/resources/metrics');\n\n/** @test {Metrics} */\ndescribe('Unit::Metrics', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const metricsInstance = new Metrics(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(metricsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(metricsInstance.http);\n  });\n\n  /** @test {Metrics} */\n  describe('Metrics', () => {\n    /** @test {Metrics} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Metrics()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Metrics} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Metrics(testApiKey)).to.throw('API secret key must be provided');\n    });\n\n    /** @test {Metrics} */\n    it('creates a new Metrics instance', () => {\n      const TestMetrics = new Metrics(testApiKey, testSecret);\n      expect(() => new Metrics(testApiKey, testSecret)).to.not.throw();\n      expect(TestMetrics.tokenId).to.equal(testApiKey);\n      expect(TestMetrics.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Metrics.breakdown} */\n  describe('Metrics.breakdown', () => {\n    /** @test {Metrics.breakdown} */\n    it('makes a get request to the Mux data breakdown route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/metrics/testMetric/breakdown', {\n        status: 200,\n        responseText: '{\"data\": {\"breakdown\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.breakdown('testMetric', {})\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].breakdown).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Metrics.comparison} */\n  describe('Metrics.comparison', () => {\n    /** @test {Metrics.comparison} */\n    it('throws an error if the value query parameter is not provided', () => {\n      expect(() => metricsInstance.comparison()).to.throw('The value query parameter is required for comparing metrics');\n      expect(() => metricsInstance.comparison({})).to.throw('The value query parameter is required for comparing metrics');\n    });\n\n    /** @test {Metrics.comparison} */\n    it('makes a get request to the Mux data comparision route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/metrics/comparison?value=abc123', {\n        status: 200,\n        responseText: '{\"data\": {\"comparison\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.comparison({ value: 'abc123' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].comparison).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Metrics.insights} */\n  describe('Metrics.insights', () => {\n    /** @test {Metrics.insights} */\n    it('throws an error if a metric Id is not provided', () => {\n      expect(() => metricsInstance.insights()).to.throw('A metric Id is required for insight metrics.');\n    });\n\n    /** @test {Metrics.insights} */\n    it('makes a get request to the Mux data insights route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/metrics/testMetric/insights', {\n        status: 200,\n        responseText: '{\"data\": {\"insights\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.insights('testMetric')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].insights).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Metrics.overall} */\n  describe('Metrics.overall', () => {\n    /** @test {Metrics.overall} */\n    it('throws an error if a metric Id is not provided', () => {\n      expect(() => metricsInstance.overall()).to.throw('A metric Id is required for overall metrics.');\n    });\n\n    /** @test {Metrics.overall} */\n    it('makes a get request to the Mux data overall route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/metrics/testMetric/overall', {\n        status: 200,\n        responseText: '{\"data\": {\"overall\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.overall('testMetric', {})\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].overall).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Metrics.timeseries} */\n  describe('Metrics.timeseries', () => {\n    /** @test {Metrics.timeseries} */\n    it('throws an error if a metric Id is not provided', () => {\n      expect(() => metricsInstance.timeseries()).to.throw('A metric Id is required for timeseries metrics.');\n    });\n\n    /** @test {Metrics.timeseries} */\n    it('makes a get request to the Mux data timeseries route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/metrics/testMetric/timeseries', {\n        status: 200,\n        responseText: '{\"data\": {\"timeseries\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.timeseries('testMetric', {})\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].timeseries).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/data/resources/metrics.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/unit/data/resources/metrics.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38",
    "access": null,
    "description": "Unit::Metrics",
    "lineNumber": 7,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe39",
    "access": null,
    "description": "Metrics",
    "lineNumber": 21,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe39.it40",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe39.it41",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 28,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe39.it42",
    "access": null,
    "description": "creates a new Metrics instance",
    "lineNumber": 33,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe43",
    "access": null,
    "description": "Metrics.breakdown",
    "lineNumber": 42,
    "testTargets": [
      "Metrics.breakdown"
    ]
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe43.it44",
    "access": null,
    "description": "makes a get request to the Mux data breakdown route",
    "lineNumber": 44,
    "testTargets": [
      "Metrics.breakdown"
    ]
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe45",
    "access": null,
    "description": "Metrics.comparison",
    "lineNumber": 62,
    "testTargets": [
      "Metrics.comparison"
    ]
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe45.it46",
    "access": null,
    "description": "throws an error if the value query parameter is not provided",
    "lineNumber": 64,
    "testTargets": [
      "Metrics.comparison"
    ]
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe45.it47",
    "access": null,
    "description": "makes a get request to the Mux data comparision route",
    "lineNumber": 70,
    "testTargets": [
      "Metrics.comparison"
    ]
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe48",
    "access": null,
    "description": "Metrics.insights",
    "lineNumber": 88,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe48.it49",
    "access": null,
    "description": "throws an error if a metric Id is not provided",
    "lineNumber": 90,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe48.it50",
    "access": null,
    "description": "makes a get request to the Mux data insights route",
    "lineNumber": 95,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "describe51",
    "testId": 51,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe51",
    "access": null,
    "description": "Metrics.overall",
    "lineNumber": 113,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe51",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe51.it52",
    "access": null,
    "description": "throws an error if a metric Id is not provided",
    "lineNumber": 115,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe51",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe51.it53",
    "access": null,
    "description": "makes a get request to the Mux data overall route",
    "lineNumber": 120,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe54",
    "access": null,
    "description": "Metrics.timeseries",
    "lineNumber": 138,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe54.it55",
    "access": null,
    "description": "throws an error if a metric Id is not provided",
    "lineNumber": 140,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe38.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe38.describe54.it56",
    "access": null,
    "description": "makes a get request to the Mux data timeseries route",
    "lineNumber": 145,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 187,
    "kind": "testFile",
    "name": "test/unit/data/resources/video_ views.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst VideoViews = require('../../../../src/data/resources/video_views');\n\n/** @test {VideoViews} */\ndescribe('Unit::VideoViews', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const videoViewsInstance = new VideoViews(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(videoViewsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(videoViewsInstance.http);\n  });\n\n  /** @test {VideoViews} */\n  describe('VideoViews', () => {\n    /** @test {VideoViews} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new VideoViews()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {VideoViews} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new VideoViews(testApiKey)).to.throw('API secret key must be provided');\n    });\n\n    /** @test {VideoViews} */\n    it('creates a new VideoViews instance', () => {\n      const TestVideoViews = new VideoViews(testApiKey, testSecret);\n      expect(() => new VideoViews(testApiKey, testSecret)).to.not.throw();\n      expect(TestVideoViews.tokenId).to.equal(testApiKey);\n      expect(TestVideoViews.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {VideoViews.list} */\n  describe('VideoViews.list', () => {\n    /** @test {VideoViews.list} */\n    it('throws an error if the viewer_id query parameter is not provided', () => {\n      expect(() => videoViewsInstance.list()).to.throw('The viewer_id query parameter is required for listing video views.');\n      expect(() => videoViewsInstance.list({})).to.throw('The viewer_id query parameter is required for listing video views.');\n    });\n\n    it('makes a get request to the Mux data video-views route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/video-views?viewer_id=abc123', {\n        status: 200,\n        responseText: '{\"data\": {\"video\": \"views\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      videoViewsInstance.list({ viewer_id: 'abc123' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].video).to.equal('views');\n        done();\n      });\n    });\n  });\n\n  /** @test {VideoViews.get} */\n  describe('VideoViews.get', () => {\n    /** @test {VideoViews.get} */\n    it('makes a get request to the Mux data video-views route', (done) => {\n      moxios.stubRequest('https://api.mux.com/data/v1/video-views/someView', {\n        status: 200,\n        responseText: '{\"data\": {\"video\": \"views\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      videoViewsInstance.get('someView')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].video).to.equal('views');\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/data/resources/video_ views.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "describe57",
    "testId": 57,
    "memberof": "test/unit/data/resources/video_ views.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57",
    "access": null,
    "description": "Unit::VideoViews",
    "lineNumber": 7,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/unit/data/resources/video_ views.spec.js~describe57",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57.describe58",
    "access": null,
    "description": "VideoViews",
    "lineNumber": 21,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/unit/data/resources/video_ views.spec.js~describe57.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57.describe58.it59",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/unit/data/resources/video_ views.spec.js~describe57.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57.describe58.it60",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 28,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/unit/data/resources/video_ views.spec.js~describe57.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57.describe58.it61",
    "access": null,
    "description": "creates a new VideoViews instance",
    "lineNumber": 33,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "describe62",
    "testId": 62,
    "memberof": "test/unit/data/resources/video_ views.spec.js~describe57",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57.describe62",
    "access": null,
    "description": "VideoViews.list",
    "lineNumber": 42,
    "testTargets": [
      "VideoViews.list"
    ]
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/unit/data/resources/video_ views.spec.js~describe57.describe62",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57.describe62.it63",
    "access": null,
    "description": "throws an error if the viewer_id query parameter is not provided",
    "lineNumber": 44,
    "testTargets": [
      "VideoViews.list"
    ]
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/unit/data/resources/video_ views.spec.js~describe57.describe62",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57.describe62.it64",
    "access": null,
    "description": "makes a get request to the Mux data video-views route",
    "lineNumber": 49
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "test/unit/data/resources/video_ views.spec.js~describe57",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57.describe65",
    "access": null,
    "description": "VideoViews.get",
    "lineNumber": 67,
    "testTargets": [
      "VideoViews.get"
    ]
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/unit/data/resources/video_ views.spec.js~describe57.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_ views.spec.js~describe57.describe65.it66",
    "access": null,
    "description": "makes a get request to the Mux data video-views route",
    "lineNumber": 69,
    "testTargets": [
      "VideoViews.get"
    ]
  },
  {
    "__docId__": 198,
    "kind": "testFile",
    "name": "test/unit/mux.spec.js",
    "content": "const { expect } = require('chai');\nconst Mux = require('../../src/mux');\nconst MuxVideo = require('../../src/video/video');\nconst MuxData = require('../../src/data/data');\n\n/** @test {Mux} */\ndescribe('Unit::Mux', () => {\n  /** @test {Mux} */\n  describe('Mux', () => {\n    /** @test {Mux} */\n    it('exposes Mux Video and Data', () => {\n      const muxClient = new Mux('testKey', 'testSecret');\n      const { Video, Data } = muxClient;\n      expect(Video).to.to.be.an.instanceof(MuxVideo);\n      expect(Data).to.to.be.an.instanceof(MuxData);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/mux.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "describe67",
    "testId": 67,
    "memberof": "test/unit/mux.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe67",
    "access": null,
    "description": "Unit::Mux",
    "lineNumber": 7,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "test/unit/mux.spec.js~describe67",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe67.describe68",
    "access": null,
    "description": "Mux",
    "lineNumber": 9,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/unit/mux.spec.js~describe67.describe68",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe67.describe68.it69",
    "access": null,
    "description": "exposes Mux Video and Data",
    "lineNumber": 11,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 202,
    "kind": "testFile",
    "name": "test/unit/video/resources/assets.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst Assets = require('../../../../src/video/resources/assets');\n\n/** @test {Assets} */\ndescribe('Unit::Assets', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testAssets = new Assets(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testAssets.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testAssets.http);\n  });\n\n  /** @test {Assets} */\n  describe('Assets', () => {\n    /** @test {Assets} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Assets()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Assets} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Assets('testKey')).to.throw('API secret key must be provided');\n    });\n\n    /** @test {Assets} */\n    it('creates a new Assets instance', () => {\n      const TestAssets = new Assets(testApiKey, testSecret);\n      expect(() => new Assets(testApiKey, testSecret)).to.not.throw();\n      expect(TestAssets.tokenId).to.equal(testApiKey);\n      expect(TestAssets.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Assets.create} */\n  describe('Assets.create', () => {\n    /** @test {Assets.create} */\n    it('makes a POST request to create an asset', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets', {\n        status: 200,\n        responseText: '{\"data\": {\"create\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.create({ input: 'test' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.create} */\n    it('throws an error if no asset params are given', () => (\n      testAssets.create().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('Params are required for creating an asset');\n      })\n    ));\n  });\n\n  /** @test {Assets.get} */\n  describe('Assets.get', () => {\n    /** @test {Assets.get} */\n    it('makes a GET request to get an asset', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets/testAsset', {\n        status: 200,\n        responseText: '{\"data\": {\"asset\": \"get\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.get('testAsset')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].asset).to.equal('get');\n        done();\n      });\n    });\n\n    /** @test {Assets.get} */\n    it('throws an error when an asset id is not given', () => (\n      testAssets.get()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('An asset ID is required to get an asset');\n        })\n    ));\n  });\n\n  /** @test {Assets.del} */\n  describe('Assets.del', () => {\n    /** @test {Assets.del} */\n    it('makes a DELETE request to delete an asset', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets/testAsset', {\n        status: 200,\n        responseText: '{\"data\": {\"asset\": \"delete\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.del('testAsset')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].asset).to.equal('delete');\n        done();\n      });\n    });\n\n    /** @test {Assets.del} */\n    it('throws an error when an asset id is not given', () => (\n      testAssets.del()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('An asset ID is required to delete an asset');\n        })\n    ));\n  });\n\n  /** @test {Assets.inputInfo} */\n  describe('Assets.inputInfo', () => {\n    /** @test {Assets.inputInfo} */\n    it('makes a GET request to get input info for an asset', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets/testAsset/input-info', {\n        status: 200,\n        responseText: '{\"data\": {\"input\": \"info\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.inputInfo('testAsset')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].input).to.equal('info');\n        done();\n      });\n    });\n\n    /** @test {Assets.inputInfo} */\n    it('throws an error when an asset id is not given', () => (\n      testAssets.inputInfo()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('An asset ID is required to get input-info');\n        })\n    ));\n  });\n\n  /** @test {Assets.list} */\n  describe('Assets.list', () => {\n    /** @test {Assets.list} */\n    it('makes a GET request to list all assets', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.list()\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n\n    it('makes a GET request to list 100 assets offset by 2 pages', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets?limit=100&page=2', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.list({ limit: 100, page: 2 })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Assets.createPlaybackId} */\n  describe('Assets.createPlaybackId', () => {\n    /** @test {Assets.createPlaybackId} */\n    it('makes a POST request to create a Playback Id for an asset', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets/testAsset/playback-ids', {\n        status: 200,\n        responseText: '{\"data\": {\"create\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.createPlaybackId('testAsset', { policy: 'public' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.createPlaybackId} */\n    it('throws an error if an asset id is not given', () => (\n      testAssets.createPlaybackId()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('An asset ID is required');\n        })\n    ));\n\n    /** @test {Assets.createPlaybackId} */\n    it('throws an error if playbackId params are not given', () => (\n      testAssets.createPlaybackId('assetid')\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('Playback ID params are required');\n        })\n    ));\n  });\n\n  /** @test {Assets.deletePlaybackId} */\n  describe('Assets.deletePlaybackId', () => {\n    /** @test {Assets.deletePlaybackId} */\n    it('makes a DELETE request to delete a Playback Id for an asset', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets/testAsset/playback-ids/testPlaybackId', {\n        status: 200,\n        responseText: '{\"data\": {\"delete\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.deletePlaybackId('testAsset', 'testPlaybackId')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].delete).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.deletePlaybackId} */\n    it('throws an error if an asset id is not given', () => (\n      testAssets.deletePlaybackId().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('An asset ID is required');\n      })\n    ));\n\n    /** @test {Assets.deletePlaybackId} */\n    it('throws an error if playbackId params are not given', () => (\n      testAssets.deletePlaybackId('assetid').catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('A playback ID is required');\n      })\n    ));\n  });\n\n  /** @test {Assets.playbackId} */\n  describe('Assets.playbackId', () => {\n    /** @test {Assets.playbackId} */\n    it('makes a GET request to get a Playback Id for an asset', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets/testAsset/playback-ids/testPlaybackId', {\n        status: 200,\n        responseText: '{\"data\": {\"get\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.playbackId('testAsset', 'testPlaybackId')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].get).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.playbackId} */\n    it('throws an error if an asset id is not given', () => (\n      testAssets.playbackId().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('An asset ID is required');\n      })\n    ));\n\n    /** @test {Assets.playbackId} */\n    it('throws an error if playbackId params are not given', () => (\n      testAssets.playbackId('assetid').catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('A playback ID is required');\n      })\n    ));\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/video/resources/assets.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/unit/video/resources/assets.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70",
    "access": null,
    "description": "Unit::Assets",
    "lineNumber": 7,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "describe71",
    "testId": 71,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe71",
    "access": null,
    "description": "Assets",
    "lineNumber": 21,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe71.it72",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe71.it73",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 28,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe71.it74",
    "access": null,
    "description": "creates a new Assets instance",
    "lineNumber": 33,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe75",
    "access": null,
    "description": "Assets.create",
    "lineNumber": 42,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe75.it76",
    "access": null,
    "description": "makes a POST request to create an asset",
    "lineNumber": 44,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe75.it77",
    "access": null,
    "description": "throws an error if no asset params are given",
    "lineNumber": 61,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe78",
    "access": null,
    "description": "Assets.get",
    "lineNumber": 70,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe78.it79",
    "access": null,
    "description": "makes a GET request to get an asset",
    "lineNumber": 72,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe78.it80",
    "access": null,
    "description": "throws an error when an asset id is not given",
    "lineNumber": 89,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "describe81",
    "testId": 81,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe81",
    "access": null,
    "description": "Assets.del",
    "lineNumber": 102,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe81",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe81.it82",
    "access": null,
    "description": "makes a DELETE request to delete an asset",
    "lineNumber": 104,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe81",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe81.it83",
    "access": null,
    "description": "throws an error when an asset id is not given",
    "lineNumber": 121,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe84",
    "access": null,
    "description": "Assets.inputInfo",
    "lineNumber": 134,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe84.it85",
    "access": null,
    "description": "makes a GET request to get input info for an asset",
    "lineNumber": 136,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe84.it86",
    "access": null,
    "description": "throws an error when an asset id is not given",
    "lineNumber": 153,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe87",
    "access": null,
    "description": "Assets.list",
    "lineNumber": 166,
    "testTargets": [
      "Assets.list"
    ]
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe87.it88",
    "access": null,
    "description": "makes a GET request to list all assets",
    "lineNumber": 168,
    "testTargets": [
      "Assets.list"
    ]
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe87.it89",
    "access": null,
    "description": "makes a GET request to list 100 assets offset by 2 pages",
    "lineNumber": 184
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe90",
    "access": null,
    "description": "Assets.createPlaybackId",
    "lineNumber": 202,
    "testTargets": [
      "Assets.createPlaybackId"
    ]
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe90.it91",
    "access": null,
    "description": "makes a POST request to create a Playback Id for an asset",
    "lineNumber": 204,
    "testTargets": [
      "Assets.createPlaybackId"
    ]
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe90.it92",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 221,
    "testTargets": [
      "Assets.createPlaybackId"
    ]
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe90.it93",
    "access": null,
    "description": "throws an error if playbackId params are not given",
    "lineNumber": 233,
    "testTargets": [
      "Assets.createPlaybackId"
    ]
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "describe94",
    "testId": 94,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe94",
    "access": null,
    "description": "Assets.deletePlaybackId",
    "lineNumber": 246,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe94",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe94.it95",
    "access": null,
    "description": "makes a DELETE request to delete a Playback Id for an asset",
    "lineNumber": 248,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe94",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe94.it96",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 265,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe94",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe94.it97",
    "access": null,
    "description": "throws an error if playbackId params are not given",
    "lineNumber": 273,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "describe98",
    "testId": 98,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe98",
    "access": null,
    "description": "Assets.playbackId",
    "lineNumber": 282,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe98.it99",
    "access": null,
    "description": "makes a GET request to get a Playback Id for an asset",
    "lineNumber": 284,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe98.it100",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 301,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/unit/video/resources/assets.spec.js~describe70.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe70.describe98.it101",
    "access": null,
    "description": "throws an error if playbackId params are not given",
    "lineNumber": 309,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 235,
    "kind": "testFile",
    "name": "test/unit/video/resources/liveStreams.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst LiveStreams = require('../../../../src/video/resources/liveStreams');\n\n/** @test {LiveStreams} */\ndescribe('Unit::LiveStreams', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testLiveStreams = new LiveStreams(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testLiveStreams.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testLiveStreams.http);\n  });\n\n  /** @test {LiveStreams} */\n  describe('LiveStreams', () => {\n    /** @test {LiveStreams} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new LiveStreams()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {LiveStreams} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new LiveStreams('testKey')).to.throw('API secret key must be provided');\n    });\n\n    /** @test {LiveStreams} */\n    it('creates a new LiveStreams instance', () => {\n      const TestLiveStreams = new LiveStreams(testApiKey, testSecret);\n      expect(() => new LiveStreams(testApiKey, testSecret)).to.not.throw();\n      expect(TestLiveStreams.tokenId).to.equal(testApiKey);\n      expect(TestLiveStreams.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {LiveStreams.create} */\n  describe('LiveStreams.create', () => {\n    /** @test {LiveStreams.create} */\n    it('makes a POST request to create a LiveStream asset', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams', {\n        status: 200,\n        responseText: '{\"data\": {\"create\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.create('testLiveStream', { playback_policy: 'public', new_asset_settings: { playback_policy: 'public' } })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {LiveStreams.del} */\n  describe('LiveStreams.del', () => {\n    /** @test {LiveStreams.del} */\n    it('makes a DELETE request to delete a live stream', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams/testLiveStream', {\n        status: 200,\n        responseText: '{\"data\": {\"deleteLive\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.del('testLiveStream')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].deleteLive).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.del} */\n    it('throws an error when a live stream id is not given', () => (\n      testLiveStreams.del()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('A live stream ID is required to delete a live stream');\n        })\n    ));\n  });\n\n  /** @test {LiveStreams.list} */\n  describe('LiveStreams.list', () => {\n    /** @test {LiveStreams.list} */\n    it('makes a GET request to list all live streams', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.list()\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n\n    it('makes a GET request to list 100 live streams offset by 2 pages', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams?limit=100&page=2', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.list({ limit: 100, page: 2 })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {LiveStreams.get} */\n  describe('LiveStreams.get', () => {\n    /** @test {LiveStreams.get} */\n    it('makes a GET request to get a live stream', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams/testLiveStream', {\n        status: 200,\n        responseText: '{\"data\": {\"live_stream\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.get('testLiveStream')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].live_stream).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.get} */\n    it('throws an error when a live stream id is not given', () => (\n      testLiveStreams.get()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('A live stream ID is required to get a live stream');\n        })\n    ));\n  });\n\n  /** @test {LiveStreams.signalComplete} */\n  describe('LiveStreams.signalComplete', () => {\n    /** @test {LiveStreams.signalComplete} */\n    it('makes a PUT request to signal a live stream is complete', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams/testLiveStream/complete', {\n        status: 200,\n        responseText: '{\"data\": {\"live_stream\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.signalComplete('testLiveStream')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].live_stream).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.signalComplete} */\n    it('throws an error when a live stream id is not given', () => (\n      testLiveStreams.signalComplete()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('A Live Stream ID is required to signal a stream is complete');\n        })\n    ));\n  });\n\n  /** @test {LiveStreams.resetStreamKey} */\n  describe('LiveStreams.resetStreamKey', () => {\n    /** @test {LiveStreams.resetStreamKey} */\n    it('makes a POST request to reset a live stream key', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams/testLiveStream/reset-stream-key', {\n        status: 200,\n        responseText: '{\"data\": {\"live_stream\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.resetStreamKey('testLiveStream')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].live_stream).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.resetStreamKey} */\n    it('throws an error when a live stream id is not given', () => (\n      testLiveStreams.resetStreamKey()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('A Live Stream ID is required to reset a live stream key');\n        })\n    ));\n  });\n\n  /** @test {LiveStreams.createPlaybackId} */\n  describe('LiveStreams.createPlaybackId', () => {\n    /** @test {LiveStreams.createPlaybackId} */\n    it('makes a POST request to create a playback ID for a live stream', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams/testLiveStream/playback-ids', {\n        status: 200,\n        responseText: '{\"data\": {\"create\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.createPlaybackId('testLiveStream', { policy: 'public' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.createPlaybackId} */\n    it('throws an error if a Live Stream ID is not given', () => (\n      testLiveStreams.createPlaybackId('testLiveStream')\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('A playback policy is required to create a live stream playback ID');\n        })\n    ));\n\n    /** @test {LiveStreams.createPlaybackId} */\n    it('throws an error if params are not given', () => (\n      testLiveStreams.createPlaybackId()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('A Live Stream ID is required to create a live stream playback ID');\n        })\n    ));\n  });\n\n  /** @test {LiveStreams.deletePlaybackId} */\n  describe('LiveStreams.deletePlaybackId', () => {\n    /** @test {LiveStreams.deletePlaybackId} */\n    it('makes a DELETE request to delete a playback ID for a live stream', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams/testLiveStream/playback-ids/testPlaybackId', {\n        status: 200,\n        responseText: '{\"data\": {\"delete\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.deletePlaybackId('testLiveStream', 'testPlaybackId')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].delete).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.deletePlaybackId} */\n    it('throws an error if a Live Stream ID is not given', () => (\n      testLiveStreams.deletePlaybackId()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('A Live Stream ID is required to delete a live stream playback ID');\n        })\n    ));\n\n    /** @test {LiveStreams.deletePlaybackId} */\n    it('throws an error if a playback id is not given', () => (\n      testLiveStreams.deletePlaybackId('liveStreamId')\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('A live stream playback ID is required to delete a live stream playback ID');\n        })\n    ));\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/video/resources/liveStreams.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "describe102",
    "testId": 102,
    "memberof": "test/unit/video/resources/liveStreams.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "access": null,
    "description": "Unit::LiveStreams",
    "lineNumber": 7,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe103",
    "access": null,
    "description": "LiveStreams",
    "lineNumber": 21,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe103.it104",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe103.it105",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 28,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe103.it106",
    "access": null,
    "description": "creates a new LiveStreams instance",
    "lineNumber": 33,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe107",
    "access": null,
    "description": "LiveStreams.create",
    "lineNumber": 42,
    "testTargets": [
      "LiveStreams.create"
    ]
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe107.it108",
    "access": null,
    "description": "makes a POST request to create a LiveStream asset",
    "lineNumber": 44,
    "testTargets": [
      "LiveStreams.create"
    ]
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe109",
    "access": null,
    "description": "LiveStreams.del",
    "lineNumber": 62,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe109",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe109.it110",
    "access": null,
    "description": "makes a DELETE request to delete a live stream",
    "lineNumber": 64,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe109",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe109.it111",
    "access": null,
    "description": "throws an error when a live stream id is not given",
    "lineNumber": 81,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "describe112",
    "testId": 112,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe112",
    "access": null,
    "description": "LiveStreams.list",
    "lineNumber": 94,
    "testTargets": [
      "LiveStreams.list"
    ]
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe112.it113",
    "access": null,
    "description": "makes a GET request to list all live streams",
    "lineNumber": 96,
    "testTargets": [
      "LiveStreams.list"
    ]
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe112.it114",
    "access": null,
    "description": "makes a GET request to list 100 live streams offset by 2 pages",
    "lineNumber": 112
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe115",
    "access": null,
    "description": "LiveStreams.get",
    "lineNumber": 130,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe115.it116",
    "access": null,
    "description": "makes a GET request to get a live stream",
    "lineNumber": 132,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe115.it117",
    "access": null,
    "description": "throws an error when a live stream id is not given",
    "lineNumber": 149,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe118",
    "access": null,
    "description": "LiveStreams.signalComplete",
    "lineNumber": 162,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe118.it119",
    "access": null,
    "description": "makes a PUT request to signal a live stream is complete",
    "lineNumber": 164,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe118.it120",
    "access": null,
    "description": "throws an error when a live stream id is not given",
    "lineNumber": 181,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "describe121",
    "testId": 121,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe121",
    "access": null,
    "description": "LiveStreams.resetStreamKey",
    "lineNumber": 194,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe121",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe121.it122",
    "access": null,
    "description": "makes a POST request to reset a live stream key",
    "lineNumber": 196,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe121",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe121.it123",
    "access": null,
    "description": "throws an error when a live stream id is not given",
    "lineNumber": 213,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "describe124",
    "testId": 124,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe124",
    "access": null,
    "description": "LiveStreams.createPlaybackId",
    "lineNumber": 226,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe124",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe124.it125",
    "access": null,
    "description": "makes a POST request to create a playback ID for a live stream",
    "lineNumber": 228,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe124",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe124.it126",
    "access": null,
    "description": "throws an error if a Live Stream ID is not given",
    "lineNumber": 245,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe124",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe124.it127",
    "access": null,
    "description": "throws an error if params are not given",
    "lineNumber": 257,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "describe128",
    "testId": 128,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe128",
    "access": null,
    "description": "LiveStreams.deletePlaybackId",
    "lineNumber": 270,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe128.it129",
    "access": null,
    "description": "makes a DELETE request to delete a playback ID for a live stream",
    "lineNumber": 272,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe128.it130",
    "access": null,
    "description": "throws an error if a Live Stream ID is not given",
    "lineNumber": 289,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe102.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe102.describe128.it131",
    "access": null,
    "description": "throws an error if a playback id is not given",
    "lineNumber": 301,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 266,
    "kind": "testFile",
    "name": "test/unit/video/resources/uploads.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst Uploads = require('../../../../src/video/resources/uploads');\n\n/** @test {Uploads} */\ndescribe('Unit::Uploads', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testUploads = new Uploads(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testUploads.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testUploads.http);\n  });\n\n  /** @test {Uploads.create} */\n  describe('Uploads.create', () => {\n    /** @test {Uploads.create} */\n    it('makes a POST request to create a new Upload', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/uploads', {\n        status: 201,\n        responseText: '{\"data\": {\"create\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testUploads.create({\n        new_asset_settings: { playback_policy: 'public' },\n      }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Uploads.create} */\n    it('throws an error if no params are given', () => (\n      testUploads.create().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.include('Params are required');\n      })\n    ));\n  });\n\n  /** @test {Uploads.get} */\n  describe('Uploads.get', () => {\n    /** @test {Uploads.get} */\n    it('makes a GET request to get an upload', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/uploads/testUpload', {\n        status: 200,\n        responseText: '{\"data\": {\"upload\": \"get\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testUploads.get('testUpload')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].upload).to.equal('get');\n        done();\n      });\n    });\n\n    /** @test {Uploads.get} */\n    it('throws an error when an upload id is not given', () => (\n      testUploads.get()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.include('An upload ID is required');\n        })\n    ));\n  });\n\n  /** @test {Uploads.cancel} */\n  describe('Uploads.cancel', () => {\n    /** @test {Uploads.cancel} */\n    it('makes a PUT request to cancel an upload', (done) => {\n      moxios.stubRequest('https://api.mux.com/video/v1/uploads/testUpload/cancel', {\n        status: 200,\n        responseText: '{\"data\": {\"upload\": \"cancel\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testUploads.cancel('testUpload')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].upload).to.equal('cancel');\n        done();\n      });\n    });\n\n    /** @test {Uploads.del} */\n    it('throws an error when an upload id is not given', () => (\n      testUploads\n        .cancel()\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.include('An upload ID is required');\n        })\n    ));\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/video/resources/uploads.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe132",
    "testId": 132,
    "memberof": "test/unit/video/resources/uploads.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132",
    "access": null,
    "description": "Unit::Uploads",
    "lineNumber": 7,
    "testTargets": [
      "Uploads"
    ]
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "describe133",
    "testId": 133,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132.describe133",
    "access": null,
    "description": "Uploads.create",
    "lineNumber": 21,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe132.describe133",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132.describe133.it134",
    "access": null,
    "description": "makes a POST request to create a new Upload",
    "lineNumber": 23,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe132.describe133",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132.describe133.it135",
    "access": null,
    "description": "throws an error if no params are given",
    "lineNumber": 41,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "describe136",
    "testId": 136,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132.describe136",
    "access": null,
    "description": "Uploads.get",
    "lineNumber": 50,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe132.describe136",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132.describe136.it137",
    "access": null,
    "description": "makes a GET request to get an upload",
    "lineNumber": 52,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe132.describe136",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132.describe136.it138",
    "access": null,
    "description": "throws an error when an upload id is not given",
    "lineNumber": 69,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe132",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132.describe139",
    "access": null,
    "description": "Uploads.cancel",
    "lineNumber": 82,
    "testTargets": [
      "Uploads.cancel"
    ]
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe132.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132.describe139.it140",
    "access": null,
    "description": "makes a PUT request to cancel an upload",
    "lineNumber": 84,
    "testTargets": [
      "Uploads.cancel"
    ]
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe132.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe132.describe139.it141",
    "access": null,
    "description": "throws an error when an upload id is not given",
    "lineNumber": 101,
    "testTargets": [
      "Uploads.del"
    ]
  },
  {
    "__docId__": 277,
    "kind": "testFile",
    "name": "test/unit/video/video.spec.js",
    "content": "const { expect } = require('chai');\nconst Video = require('../../../src/video/video');\nconst Assets = require('../../../src/video/resources/assets');\nconst LiveStreams = require('../../../src/video/resources/liveStreams');\nconst Uploads = require('../../../src/video/resources/uploads');\n\n/** @test {Video} */\ndescribe('Unit::Video', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n\n  /** @test {Video} */\n  describe('Video', () => {\n    /** @test {Video} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Video()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Video} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Video('testKey')).to.throw('API secret key must be provided');\n    });\n\n    /** @test {Video} */\n    it('creates a new Video instance', () => {\n      const TestVideo = new Video(testApiKey, testSecret);\n      expect(() => new Video(testApiKey, testSecret)).to.not.throw();\n      expect(TestVideo.Assets).to.be.an.instanceof(Assets);\n      expect(TestVideo.LiveStreams).to.be.an.instanceof(LiveStreams);\n      expect(TestVideo.LiveStreams).to.be.an.instanceof(LiveStreams);\n      expect(TestVideo.Uploads).to.be.an.instanceof(Uploads);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/mmcc/Projects/muxinc/mux-node-sdk/test/unit/video/video.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "describe142",
    "testId": 142,
    "memberof": "test/unit/video/video.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe142",
    "access": null,
    "description": "Unit::Video",
    "lineNumber": 8,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "describe143",
    "testId": 143,
    "memberof": "test/unit/video/video.spec.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe142.describe143",
    "access": null,
    "description": "Video",
    "lineNumber": 13,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/unit/video/video.spec.js~describe142.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe142.describe143.it144",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 15,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/unit/video/video.spec.js~describe142.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe142.describe143.it145",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 20,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/unit/video/video.spec.js~describe142.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe142.describe143.it146",
    "access": null,
    "description": "creates a new Video instance",
    "lineNumber": 25,
    "testTargets": [
      "Video"
    ]
  }
]